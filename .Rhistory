runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$valor = 0
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
remove(abbrev_id)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
renv::restore(confirm = FALSE)
shiny::runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
# R dependencies
library(shiny)
library(shinydashboard)
library(shinyjs)
library(reticulate)
library(jsonlite)
library(shinycssloaders)
library(tidyr)
library(dplyr)
library(shinyWidgets)
library(RColorBrewer)
library(pals)
library(stringr)
library(mongolite)
options(mongodb = list(
"host" = "localhost",
"port" = "27017",
"username" = "admin",
"password"=""
))
databaseName <- "annot_norm_test"
collectionName <- "pruebas4"
## Load data from MongoDB
db <<- mongo(collection = collectionName,
db = databaseName,
url = paste0("mongodb://",options()$mongodb$host,":",options()$mongodb$port),
options = ssl_options(weak_cert_validation = TRUE))
## Load data from MongoDB
db <<- mongo(collection = collectionName,
db = databaseName,
url = paste0("mongodb://",options()$mongodb$host,":",options()$mongodb$port),
options = ssl_options(weak_cert_validation = TRUE))
## Load data from MongoDB
db <<- mongo(collection = collectionName,
db = databaseName,
url = paste0("mongodb://",options()$mongodb$host,":",options()$mongodb$port))
## Load data from MongoDB
db <<- mongo(collection = collectionName,
db = databaseName,
url = paste0("mongodb://",options()$mongodb$host,":",options()$mongodb$port),
options = ssl_options(weak_cert_validation = TRUE))
## Load data from MongoDB
db <<- mongo(collection = collectionName,
db = databaseName,
url = paste0("mongodb://",options()$mongodb$host,":",options()$mongodb$port),
options = ssl_options(weak_cert_validation = TRUE))
## Load data from MongoDB
db <<- mongo(collection = collectionName,
db = databaseName,
url = paste0("mongodb://localhost:27017"),
options = ssl_options(weak_cert_validation = TRUE))
## Load data from MongoDB
db <<- mongo(collection = collectionName,
db = databaseName,
url = paste0("mongodb://",options()$mongodb$host,":",options()$mongodb$port),
options = ssl_options(weak_cert_validation = TRUE))
## Load data from MongoDB
db <<- mongo(collection = collectionName,
db = databaseName,
url = "mongodb://127.0.0.1:27017",
options = ssl_options(weak_cert_validation = TRUE))
options(mongodb = list(
"host" = "127.0.0.1",
"port" = "27017",
"username" = "admin",
"password"=""
))
databaseName <- "annot_norm_test"
collectionName <- "pruebas4"
## Load data from MongoDB
db <<- mongo(collection = collectionName,
db = databaseName,
url = paste0("mongodb://",options()$mongodb$host,":",options()$mongodb$port),
options = ssl_options(weak_cert_validation = TRUE))
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
renv::diagnostics()
install.packages("learnr")
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp()
runApp()
runApp()
shiny::runApp()
readRenviron(".config_file")
readRenviron(".config_file")
readRenviron(".config_file")
readRenviron(".config_file")
readRenviron(".config_file")
mongo_host <- Sys.getenv("MONGODB_HOST")
mongo_port <- Sys.getenv("MONGODB_PORT")
mongo_user <- Sys.getenv("MONGODB_USER")
mongo_pass <- Sys.getenv("MONGODB_PASSWORD")
mongo_host
readRenviron(".config_file")
mongo_host <- Sys.getenv("MONGODB_HOST")
mongo_port <- Sys.getenv("MONGODB_PORT")
mongo_user <- Sys.getenv("MONGODB_USER")
mongo_pass <- Sys.getenv("MONGODB_PASSWORD")
mongo_database <- Sys.getenv("MONGODB_DATABASENAME")
mongo_collection <- Sys.getenv("MONGODB_COLLECTIONNAME")
?mongo
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.logical("True")
runApp()
runApp()
runApp()
runApp()
?modalDialog
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?shinyjs::disabled(
)
tags$div(inputID="asd")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
datos_reactive$data
datos
datos$previously_annotated[1]
datos$previously_annotated[49]
as.logical(datos$previously_annotated[49])
as.logical(datos$previously_annotated[1])
runApp()
strsplit("####",split="#")
strsplit("####",split="#")[1]
unlist(strsplit("####",split="#"))[1]
if (unlist(strsplit("####",split="#"))[1]=="") FALSE else TRUE
if (unlist(strsplit("a####",split="#"))[1]=="") FALSE else TRUE
runApp()
runApp()
runApp()
runApp()
View(datos)
datos[1]
datos[1,1]
runApp()
list("$set" = list("annotation_included" = datos_reactive$data[row_sel,]$annotation_included,
"validated" = datos_reactive$data[row_sel,]$validated,
"previously_annotated" = datos_reactive$data[row_sel,]$previously_annotated))
list("$set" = list("annotation_included" =datos[1,]$annotation_included,
"validated" = datos[1,]$validated,
"previously_annotated" = datos[1,]$previously_annotated))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
datos
type(loadData)
types(loadData)
loadData$validated = as.numeric(load_data$validated)
datos$validated = as.numeric(datos$validated)
datos
type(datos$validated)
datos$validated
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(datos)
runApp()
datos$no_code
datos[1,]$no_code
datos$no_code = as.logical(datos$no_code)
datos$no_code
runApp()
datos[1,]$no_code
runApp()
runApp()
input
prueba
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# GET DATA FROM TABLE TO DO QUERY IN MONGO EACH TIME.
file_name = "es-S0210-56912007000900007-3"
query_get_text = paste0("{","filename_id",":",filename,"}")
query_get_text = paste0("{","filename_id",":",file_name,"}")
query_get_text
db_text$find(field = query_get_text)
query_get_text = paste0("{","'filename_id'",":'",file_name,"'}")
db_text$find(field = query_get_text)
query_get_text
query_get_text = paste0('{','"filename_id"',':"',file_name,'"}"')
db_text$find(field = '{}',sort='{"validated":1}')
asd = db_text$find(field = '{}',sort='{"validated":1}')
View(asd)
asd = db_text$find(field = query_get_text)
asd = db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3"')
db_text$find()
db_text
asd = db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3"}')
asd
View(asd)
asd = db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3"}')
asd
View(asd)
db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3"}')
db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3"}')
db_text
db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3"}',fields = "{"_id":0,"text":1"}")
db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3"}',fields = "{"_id":0,"text":"1"}")
db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3"}',fields = '{"_id":0,"text":"1"}')
db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3"}',limit=1)
db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3"}',limit=2)
db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3"}',limit=1)
db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3asd"}',limit=1)
db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3asasdasdasd"}',limit=1)
db_text$find(field = '{"filename_id" : "es-S0210-56912007000900007-3"}')
db_text
db_text$find(query = '{"filename_id" : "es-S0210-56912007000900007-3"}')
query_get_text = paste0('{','"filename_id"',':"',file_name,'"}"')
asd = db_text$find(query = query_get_text)
query_get_text = paste0('{','"filename_id"',':"',file_name,'"}"')
query_get_text
query_get_text = paste0('{','"filename_id"',':"',file_name,'"}')
asd = db_text$find(query = query_get_text)
asd
runApp()
runApp()
data
datos
datos[1,]
datos[1,]$filename_id
strsplit(datos[1,]$filename_id,split="#")
unlist(strsplit(datos[1,]$filename_id,split="#"))
unlist(strsplit(datos[1,]$filename_id,split="#"))[0]
unlist(strsplit(datos[1,]$filename_id,split="#"))
unlist(strsplit(datos[1,]$filename_id,split="#"))[1]
runApp()
mongo_collection_texts
runApp()
runApp()
runApp()
runApp()
View(datos)
readRenviron(".config_file")
mongo_host <- Sys.getenv("MONGODB_HOST")
mongo_port <- Sys.getenv("MONGODB_PORT")
mongo_user <- Sys.getenv("MONGODB_USER")
mongo_pass <- Sys.getenv("MONGODB_PASSWORD")
mongo_database <- Sys.getenv("MONGODB_DATABASENAME")
mongo_collection <- Sys.getenv("MONGODB_COLLECTIONANNOTATION")
abspath2dicc  <- Sys.getenv("DICCIONARY_ABS_PATH")
mongo_collection_texts <- Sys.getenv("MONGODB_COLLECTIONTEXTS")
## Load annotation data from MongoDB
db <<- mongo(collection = mongo_collection,
db = mongo_database,
url = paste0("mongodb://",mongo_host,":",mongo_port),
options = ssl_options(weak_cert_validation = TRUE))
## Load text data from MongoDB
db_text <<- mongo(collection = mongo_collection_texts,
db = mongo_database,
url = paste0("mongodb://",mongo_host,":",mongo_port),
options = ssl_options(weak_cert_validation = TRUE))
# Necesitaremos incorporar opcion de tipo de conexión (user o sin user)
loadData <- function(db) {
# Connect to the database
datos <- db$find(field = '{}',sort='{"validated":1}')
datos$validated = as.numeric(datos$validated)
datos
}
datos <- loadData(db)
# Creamos reactive values
context_id <- reactiveVal()
context_id(gsub("[.#-]","_",paste0("contextx_",datos[1,]$filename_id)))
composite_id <- reactiveVal()
abbrev_id <- reactiveVal()
# Cargamos  El diccionario de normalización
loadDict  <- function() {
# /srv/shiny-server/bioMnorm/data/diccionario.tsv
diccionario <- read.csv(abspath2dicc,sep="\t",
colClasses = c("code" = "character"))
# Apply function para obtener URL de diccionario.
parte_web1="https://browser.ihtsdotools.org/?perspective=full&conceptId1="
parte_web2="&edition=MAIN/SNOMEDCT-ES/2022-10-31&release=&languages=es"
diccionario<-  diccionario %>%
rowwise()  %>%
mutate(url = paste0(parte_web1,code,parte_web2))
main_terms<-  diccionario  %>%
group_by(code)  %>%
filter(mainterm == 1) %>%
mutate(term = first(term)) %>%
mutate(sinonimo = "")
sinonimos <- diccionario  %>%
group_by(code)  %>%
filter(mainterm == 0) %>%
mutate(sinonimo = list(term))  %>%
distinct(code, sinonimo)
diccionario <- merge(main_terms, sinonimos %>%
group_by(code) %>%
mutate(sinonimo = list(sinonimo)), by = "code", all.x=TRUE)
diccionario
}
diccionario <- loadDict()
# Filtra diccionario
filtra_dict <- function(datos,diccionario, row_sel) {
cadena = datos$codes[row_sel]
cadena_caracteres = gsub("]", "", cadena)
cadena_caracteres = gsub('\\[', "", cadena_caracteres)
cadena_caracteres = gsub(' ', "", cadena_caracteres)
lista <- unlist(strsplit(cadena_caracteres, split = ","))
dicc_filt <- diccionario %>%
filter(code %in% lista)
dicc_filt$order <- match(dicc_filt$code,lista)
dicc_filt <- dicc_filt %>% arrange(order)
return(dicc_filt)
}
# Obten lista de sinonimos en formato output dada una lista de strings
get_list_sins <- function(lista_sinonimos){
lista = div(
lapply(1:length(lista_sinonimos), function(j) {
p(HTML(paste0(j,". ",lista_sinonimos[j])))}))
return(lista)
}
update_dataframe =function(datos_reactive_var,input, code, name_relbox_code){
# Actualizamos el campo a validado
if(input[["previously_annotated"]]==TRUE){
datos_reactive_var[row_sel,]$validated = 2
datos_reactive_var[row_sel,]$annotation_included =  "####"
datos_reactive_var[row_sel,]$no_code = input[["no_code"]]
datos_reactive_var[row_sel,]$previously_annotated = TRUE
}
else if(input[["previously_annotated"]]==FALSE){
if(input[["no_code"]]){
datos_reactive_var[row_sel,]$validated = 1
datos_reactive_var[row_sel,]$annotation_included =  "####"
datos_reactive_var[row_sel,]$no_code = input[["no_code"]]
datos_reactive_var[row_sel,]$previously_annotated = FALSE
}else{
annotation_included = c(
"is_abb" = input[[abbrev_id()]],
"is_composite" = input[[composite_id()]],
"need_context" = input[[context_id()]],
"code" = code,
"sem_rel" = input[[name_relbox_code]]
)
annotation_included_str <-  paste(annotation_included, collapse = "#")
datos_reactive_var[row_sel,]$validated = 1
datos_reactive_var[row_sel,]$annotation_included =  annotation_included_str
datos_reactive_var[row_sel,]$no_code = input[["no_code"]]
datos_reactive_var[row_sel,]$previously_annotated = FALSE
}
}
datos_reactive_var[row_sel,]
}
# Genera el output box para cada concepto
code_box2<- function(termino, sem_tag, codigo, lista_sinonimos_html, icon = NULL, color = "aqua", width = 4,
href = NULL){
boxContent <- div(class = "estilo_sct",
div(class="dot"),
div(class = "inner",
p(style="width: 100%",
HTML(paste0("<b>",termino," (",sem_tag,")</b>"))),
),
div(class = "codigos",
p(HTML(paste0("SCTID: ",codigo)))
),
div(class = "sinonimos",
lista_sinonimos_html,
),
if (!is.null(icon)) div(class = "icon-large", icon)
)
if (!is.null(href))
boxContent <- a(boxContent, href = href, target="_blank")
div(class = if (!is.null(width)) paste0("col-sm-", width),
boxContent
)
}
runApp()
runApp()
runApp()
runApp()
View(dfasd)
DT::datatable(df)
df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
